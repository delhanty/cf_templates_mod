AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys the ECS module services.
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    AllowedValues:
      - dev
      - qa
      - prod
    Type: String
  ModuleClusterSize:
    Description: Number of instances for this cluster
    Type: Number 
    Default: 2
  ModuleInstanceType:
    Description: The instance type the ECS Host instance will launch under.
    Type: String
    Default: t2.medium
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

Resources:
   
  ModulesECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${EnvironmentName}-modules-ecs-cluster"

  # Key & Security Related
  ModulesECSServerPrivateKey:
    Type: Custom::RSAKey
    Properties:
      Name: !Sub '/am/${EnvironmentName}/modulesecs/key'
      KeyAlias: alias/aws/ssm
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:linkai-cfn-secret-provider'

  ModulesECSServerKeyPair:
    Type: Custom::KeyPair
    DependsOn: ModulesECSServerPrivateKey
    Properties:
      Name: !Sub ${EnvironmentName}-ModulesECSServerKeyPair
      PublicKeyMaterial: !GetAtt 'ModulesECSServerPrivateKey.PublicKey'
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:linkai-cfn-secret-provider'

  ModulesECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${EnvironmentName}-modules-ecs-sg"
      GroupDescription: Allow access to module ecs host instance
      VpcId: 
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-VPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCCIDR"
      - IpProtocol: tcp
        FromPort: 8300
        ToPort: 8600
        CidrIp: 
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCCIDR"
      - IpProtocol: tcp
        FromPort: 32768
        ToPort: 65535 
        CidrIp: 
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCCIDR"
      - IpProtocol: udp
        FromPort: 8300
        ToPort: 8600
        CidrIp: 
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCCIDR"
      Tags:
        - Key: purpose
          Value: allow access to modules ecs host instance



  # A role used to allow AWS Autoscaling to inspect stats and adjust scaleable targets
  # on your AWS account
  ModulesECSAutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub "${EnvironmentName}-moduleservice-autoscaling"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  ModuleEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub "${EnvironmentName}-module-ecs-service"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'

  ModulesECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'ModuleEC2Role']

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ModulesECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub "${EnvironmentName}-module-ecs-service"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
            Resource: '*'

  # A log group for storing the std logs
  ModulesECSConsulAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: !Sub "${EnvironmentName}-modules-ecs-daemon-consul-agent"

  # Consul agent role. This role authorizes the Consul daemon to query the list of EC2 instances
  # by tag in order to locate the Consul server.
  ModulesECSConsulAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub "${EnvironmentName}-module-query-ec2-instances"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:DescribeInstances'
            Resource: '*'

  # Define the consul agent task
  ModulesECSConsulAgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: consul-agent
      TaskRoleArn: !GetAtt 'ModulesECSConsulAgentRole.Arn'
      Volumes:
        - Host:
            SourcePath: /opt/consul/config
          Name: consul-config
        - Host:
            SourcePath: /opt/consul/data
          Name: consul-data
        - Host:
            SourcePath: /var/run/docker.sock
          Name: consul-docker
      ContainerDefinitions:
        - Name: consul-agent
          Image: docker.io/consul:1.4.4
          Command: [
            "consul", "agent", "-ui",
            "-config-file", "/etc/consul/consul-agent.json",
            "-data-dir", "/consul/data"
          ]
          Memory: 128
          PortMappings:
            - HostPort: 8301
              ContainerPort: 8301
              Protocol: tcp
            - HostPort: 8301
              ContainerPort: 8301
              Protocol: udp
            - HostPort: 8400
              ContainerPort: 8400
              Protocol: tcp
            - HostPort: 8500
              ContainerPort: 8500
              Protocol: tcp
            - HostPort: 53
              ContainerPort: 53
              Protocol: udp
          Essential: true
          MountPoints:
            - ContainerPath: /etc/consul
              SourceVolume: consul-config
              ReadOnly: true
            - ContainerPath: /consul/data
              SourceVolume: consul-data
              ReadOnly: false
            - ContainerPath: /var/run/docker.sock
              SourceVolume: consul-docker
              ReadOnly: true
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-modules-ecs-daemon-consul-agent
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'consul-agent'

  # Consul agent daemon
  ModulesECSConsulAgentDaemon:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: 'consul-agent'
      Cluster: !Ref ModulesECSCluster
      TaskDefinition: !Ref 'ModulesECSConsulAgentTaskDefinition'
      SchedulingStrategy: 'DAEMON'

  # A log group for storing the std logs
  ModulesECSConsulRegistratorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: !Sub "${EnvironmentName}-modules-ecs-daemon-consul-registrator"

  # Define the consul registrator task
  ModulesECSConsulRegistratorTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: consul-registrator
      Volumes:
        - Host:
            SourcePath: /opt/consul-registrator/bin
          Name: consul-registrator-bin
        - Host:
            SourcePath: /var/run/docker.sock
          Name: consul-registrator-docker
      NetworkMode: host
      ContainerDefinitions:
        - Name: consul-registrator
          Image: "gliderlabs/registrator:latest"
          EntryPoint:
            - /bin/consul-registrator/start.sh
          Memory: 128
          Essential: true
          MountPoints:
            - ContainerPath: /bin/consul-registrator
              SourceVolume: consul-registrator-bin
              ReadOnly: true
            - ContainerPath: /tmp/docker.sock
              SourceVolume: consul-registrator-docker
              ReadOnly: true
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub "${EnvironmentName}-modules-ecs-daemon-consul-registrator"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'consul-registrator'

  # Consul registrator daemon
  ModulesECSConsulRegistratorDaemon:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: 'consul-registrator'
      Cluster: !Ref ModulesECSCluster
      TaskDefinition: !Ref 'ModulesECSConsulRegistratorTaskDefinition'
      SchedulingStrategy: 'DAEMON'
  
  ModulesECSLaunchConfiguration:
    DependsOn: [ModulesECSServerKeyPair, ModulesECSCluster]
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-007571470797b8ffa
      InstanceType: !Ref ModuleInstanceType
      SecurityGroups:
      - !Ref ModulesECSSecurityGroup
      IamInstanceProfile: !Ref ModulesECSInstanceProfile
      KeyName: !Sub "${EnvironmentName}-ModulesECSServerKeyPair"
      UserData:
        # The following literal block is a script which runs on
        # each EC2 instance in the autoscaling group on boot to
        # setup up configuration files that are later mounted into
        # Linkerd containers for the Linkerd ingress
        Fn::Base64:
          Fn::Join:
            - ''
            - - !Sub |
                #!/bin/bash -x
                echo ECS_CLUSTER=${ModulesECSCluster} >> /etc/ecs/ecs.config
                yum install -y aws-cfn-bootstrap
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ModulesECSAutoScalingGroup --region ${AWS::Region}
              - |
                #
                # This script generates config to be used by their respective Task Definitions:
                # 1. consul-registrator startup script
                # 2. Consul Agent config
                usermod -a -G docker ec2-user
                # Install the AWS CLI and the jq JSON parser
                yum install -y aws-cli jq
                # Gather metadata for linkerd and Consul Agent
                EC2_INSTANCE_IP_ADDRESS=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
                EC2_INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                #
                # Generate consul-registrator startup file
                #
                mkdir -p /opt/consul-registrator/bin
                cat << EOF > /opt/consul-registrator/bin/start.sh
                #!/bin/sh
                exec /bin/registrator -ip ${EC2_INSTANCE_IP_ADDRESS} -retry-attempts -1 consul://${EC2_INSTANCE_IP_ADDRESS}:8500
                EOF
                chmod a+x /opt/consul-registrator/bin/start.sh
                #
                # Generate Consul Agent config file
                #
                mkdir -p /opt/consul/data
                mkdir -p /opt/consul/config
                cat << EOF > /opt/consul/config/consul-agent.json
                {
                  "advertise_addr": "${EC2_INSTANCE_IP_ADDRESS}",
                  "client_addr": "0.0.0.0",
                  "node_name": "${EC2_INSTANCE_ID}",
                  "retry_join": [
              - |
              - !Sub "\"provider=aws tag_key=Name tag_value=${EnvironmentName}-ConsulServer\""
              - "]}\nEOF\n"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ModulesECSCluster} >> /etc/ecs/ecs.config
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ModulesECSLaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
  
  ModulesECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PublicSubnets"
      LaunchConfigurationName: !Ref ModulesECSLaunchConfiguration
      MinSize: !Ref ModuleClusterSize
      MaxSize: !Ref ModuleClusterSize
      DesiredCapacity: !Ref ModuleClusterSize
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-modules-ecs-autoscaling-group"
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
